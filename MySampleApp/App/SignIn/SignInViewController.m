//
//  SignInViewController.m
//  MySampleApp
//
//
// Copyright 2015 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to 
// copy, distribute and modify it.
//

//
#import <Foundation/Foundation.h>
#import "MainViewController.h"
#import "SignInViewController.h"
#import <AWSCore/AWSCore.h>
#import "AWSIdentityManager.h"
#import <Parse/Parse.h>

static NSString *LOG_TAG;

@interface SignInViewController ()

@property (nonatomic, strong) id didSignInObserver;
@property (weak, nonatomic) IBOutlet UIActivityIndicatorView *activityView;

@end

@implementation SignInViewController

+ (void)initialize {
    [super initialize];
    LOG_TAG = NSStringFromClass(self);
}

#pragma mark - UIViewController

- (void)viewDidLoad {
    [super viewDidLoad];
    NSLog(@"%@: Sign-In Loading.", LOG_TAG);


    __weak SignInViewController *weakSelf = self;
    self.didSignInObserver =[[NSNotificationCenter defaultCenter] addObserverForName:AWSIdentityManagerDidSignInNotification
                                                                              object:[AWSIdentityManager sharedInstance]
                                                                               queue:[NSOperationQueue mainQueue]
                                                                          usingBlock:^(NSNotification * _Nonnull note) {
                                                                              [weakSelf.presentingViewController dismissViewControllerAnimated:YES
                                                                                                                                    completion:nil];
                                                                          }];
        // FACEBOOK UI SETUP
        [self.facebookButton addTarget:self
                                action:@selector(handleFacebookLogin)
                      forControlEvents:UIControlEventTouchUpInside];
        UIImage *facebookButtonImage = [UIImage imageNamed:@"FacebookButton"];
        if (facebookButtonImage) {
            [self.facebookButton setImage:facebookButtonImage
                                 forState:UIControlStateNormal];
        } else {
            NSLog(@"%@: Facebook button image unavailable. We're hiding this button.", LOG_TAG);
            self.facebookButton.hidden = YES;
        }

        [self.view addConstraint:[NSLayoutConstraint constraintWithItem:self.facebookButton
                                                              attribute:NSLayoutAttributeTop
                                                              relatedBy:NSLayoutRelationEqual
                                                                 toItem:[self anchorViewForFacebook]
                                                              attribute:NSLayoutAttributeBottom
                                                             multiplier:1
                                                               constant:8.0]];
        [self.googleButton removeFromSuperview];
        // CUSTOM UI SETUP
        [self.customProviderButton addTarget:self
                                      action:@selector(handleCustomLogin)
                            forControlEvents:UIControlEventTouchUpInside];
        [self.customCreateAccountButton addTarget:self
                                           action:@selector(handleCustomLogin)
                                 forControlEvents:UIControlEventTouchUpInside];
        [self.customForgotPasswordButton addTarget:self
                                            action:@selector(handleCustomLogin)
                                  forControlEvents:UIControlEventTouchUpInside];

        [self.customProviderButton setImage:[UIImage imageNamed:@"LoginButton"]
                                   forState:UIControlStateNormal];
}

- (void)dealloc {
    [[NSNotificationCenter defaultCenter] removeObserver:self.didSignInObserver];
}

#pragma mark - Utility Methods

- (void)handleLoginWithSignInProvider:(AWSSignInProviderType)signInProviderType {

    [[AWSIdentityManager sharedInstance] loginWithSignInProvider:signInProviderType
                                               completionHandler:^(id result, NSError *error) {
                                                   if (!error) {
//                                                       dispatch_async(dispatch_get_main_queue(), ^{
//                                                               [self.parentViewController dismissViewControllerAnimated:YES
//                                                                                                             completion:nil];
//                                                       });
                                                      
                                                      [self loginIntoParse:[AWSIdentityManager sharedInstance].userName password:[AWSIdentityManager sharedInstance].userName];
                                                   }
                                                   NSLog(@"result = %@, error = %@", result, error);
                                               }];
}

- (void)showErrorDialog:(NSString *)loginProviderName withError:(const NSError *)error {
    NSLog(@"%@: %@ failed to sign in w/ error: %@", LOG_TAG, loginProviderName, error);

    UIAlertController *alertController = [UIAlertController alertControllerWithTitle:NSLocalizedString(@"Sign-in Provider Sign-In Error", @"Sign-in error for sign-in failure.")
                                                                             message:NSLocalizedString(@"%@ failed to sign in w/ error: %@", @"Sign-in message structure for sign-in failure.")
                                                                      preferredStyle:UIAlertControllerStyleAlert];
    UIAlertAction *doneAction = [UIAlertAction actionWithTitle:NSLocalizedString(@"Cancel", @"Label to cancel sign-in failure.")
                                                         style:UIAlertActionStyleCancel
                                                       handler:nil];
    [alertController addAction:doneAction];

    [self presentViewController:alertController
                       animated:YES
                     completion:nil];
}

#pragma mark - IBActions

- (void)handleFacebookLogin {
   [_activityView startAnimating];   
    [self handleLoginWithSignInProvider:AWSSignInProviderTypeFacebook];
}

- (void)handleCustomLogin {
   [_activityView startAnimating];
   if (_customUserIdField.text == NULL || [_customUserIdField.text length] <=0) {
      
      return;
   }
   

   if (_customPasswordField.text == NULL || [_customPasswordField.text length] <=0) {
      return;
   }
 
   [self loginIntoParse:_customUserIdField.text password:_customPasswordField.text];


}

-(void) loginIntoParse:(NSString*) aUserName password:(NSString*)aPassword {
   
   PFUser *user = [PFUser user];
   user.username = aUserName;
   user.password = aPassword;
   
   [_customProviderButton setTitleColor:[UIColor grayColor] forState:UIControlStateDisabled];
   [_facebookButton setTitleColor:[UIColor whiteColor] forState:UIControlStateNormal];
   
   //   [_mActivityView startAnimating];
   
   
   
   [user signUpInBackgroundWithBlock:^(BOOL succeeded, NSError *error) {
      
      if (!error) {
         // Hooray! Let them use the app now.
         
         NSLog(@"Registered");
         
         PFInstallation *currentInstallation = [PFInstallation currentInstallation];
         if ([PFUser currentUser].username) {
            currentInstallation[@"username"] = [PFUser currentUser].username;
         }
         currentInstallation[@"User"] = [PFUser currentUser];         
         [currentInstallation saveInBackground];
         
//         dispatch_async(dispatch_get_main_queue(), ^{
//            [self.parentViewController dismissViewControllerAnimated:YES
//                                                          completion:nil];
//         });
         
        dispatch_async(dispatch_get_main_queue(), ^{
            NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];
            [notificationCenter postNotificationName:AWSIdentityManagerDidSignInNotification
                                              object:[AWSIdentityManager sharedInstance]
                                            userInfo:nil];
        });
         
      } else {
         
         if ([error code] == 202) {
            [PFUser logInWithUsernameInBackground:aUserName password:aPassword
                                            block:^(PFUser *user, NSError *error) {
                                               //[_mActivityView stopAnimating];
                                               
                                               if (user) {
                                                  
                                                  NSLog(@"Logged In");
                                                  
                                                  
                                                  
                                                  PFInstallation *currentInstallation = [PFInstallation currentInstallation];
                                                  if ([PFUser currentUser].username) {
                                                     currentInstallation[@"username"] = [PFUser currentUser].username;
                                                  }
                                                  
                                                  currentInstallation[@"User"] = [PFUser currentUser];
                                                  [currentInstallation saveInBackground];
                                                  
//                                                  dispatch_async(dispatch_get_main_queue(), ^{
//                                                     [self.parentViewController dismissViewControllerAnimated:YES
//                                                                                                   completion:nil];
//                                                  });
                                                  
                                                  dispatch_async(dispatch_get_main_queue(), ^{
                                                     NSNotificationCenter *notificationCenter = [NSNotificationCenter defaultCenter];
                                                     [notificationCenter postNotificationName:AWSIdentityManagerDidSignInNotification
                                                                                       object:[AWSIdentityManager sharedInstance]
                                                                                     userInfo:nil];
                                                  });
                                                  
                                               } else {
                                                  [[[UIAlertView alloc] initWithTitle:NSLocalizedString(@"BuddyProject", nil) message:NSLocalizedString(@"Unable to login at this time. Please make sure you are connected to Internet and try again.",nil) delegate:nil cancelButtonTitle:nil otherButtonTitles:NSLocalizedString(@"OK", nil), nil] show];
                                               }
                                            }];
         }
         else {
            [[[UIAlertView alloc] initWithTitle:NSLocalizedString(@"BuddyProject", nil) message:NSLocalizedString(@"Unable to login at this time. Please make sure you are connected to Internet and try again.",nil) delegate:nil cancelButtonTitle:nil otherButtonTitles:NSLocalizedString(@"OK", nil), nil] show];
         }
      }
   }];
}

- (UIView *)anchorViewForFacebook {
        return self.orSignInWithLabel;

    return self.anchorView;
}


@end
